/**
\mainpage lsst::pipe::base; Base package for pipeline tasks

\section pipeBase_introduction Introduction

Infrastructure to support pipeline tasks

The basic design is as follows:
- Data is processed by a pipeline task, which is usually a subclass of CmdLineTask.
  This is done by calling the parseAndRun method of the task, which parses command-line arguments
  and executes the parsed command. parseAndRun also persists the configuration used for the task,
  and metadata generated by the task (including timing data).
  
- Pipeline tasks rarely, if ever, perform multitasking (though they may well use GPUs).
  For multitasking, run multiple instances of the task.
  
- Tasks are typically put into the pipe_tasks package, in the python directory.
  Tasks meant to be run from the command line (subclasses of CmdLineTask) also have
  a short script in the bin directory.

- Each task may call subtasks (instances of Task or CmdLineTask) as it sees fit.
  Data is passed between a parent task and its subtasks by subroutine calls.

- Most tasks have a run method that performs the primary data processing.
  The run method for a subclass of CmdLineTask typically receives a single butler data reference,
  but subtasks may use any arguments they wish. Each task's run method returns a Struct;
  this allows named access to returned data, which provides safer evolution
  than relying on the order of returned values.

pipe_base is written purely in Python. Contents include:
@li lsst.pipe.base.CmdLineTask: base class for pipeline tasks
@li lsst.pipe.base.Task: base class for subtasks.
@li lsst.pipe.base.Struct: object returned by the run method of a task.
@li lsst.pipe.base.ArgumentParser: command line parser for pipeline tasks.
@li lsst.pipe.base.timeMethod: decorator to log performance information about a Task method.
*/
}}}
